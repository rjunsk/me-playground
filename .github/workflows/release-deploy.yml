name: Release and Deploy Minor/Patch Version

on:
  workflow_dispatch:
    inputs:
      extension-name:
        type: choice
        required: true
        description: Extension to Release
        options: 
        - audio-mixer
        - video-composer
      release-environment:
        type: choice
        required: true
        description: Release Environment
        options: 
        - Beta
        - Stable

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Set input as env variables
      run: |
        echo "extension_name=${{ github.event.inputs.extension-name }}" >> $GITHUB_ENV
        echo "release_environment=${{ github.event.inputs.release-environment }}" >> $GITHUB_ENV

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
        
    - uses: actions/checkout@v1

    - name: get version
      id: version
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: '${{ github.event.inputs.extension-name }}/package.json'
        prop_path: 'version'
        
    - name: Set version to env
      run: echo "release_version=${{ steps.version.outputs.prop }}" >> $GITHUB_ENV
                      
    - name: Compute Release Name
      uses: actions/github-script@v6
      id: release-name
      with:
        script: |
          const { extension_name, release_environment, release_version } = process.env;

          return release_environment == 'Beta' ? `${extension_name}-${release_version}-beta` : `${extension_name}-${release_version}`;
        result-encoding: string
              
    - name: Perform Release
      id: release
      uses: actions/github-script@v6
      with:
        script: |
          const { release_environment } = process.env;
          const isPreRelease = release_environment == 'Beta';
          
          github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.release-name.outputs.result }}',
            name: '${{ steps.release-name.outputs.result }}',
            prerelease: isPreRelease,
            generate_release_notes: true
          });

  trigger-circleci:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Set input as env variables
        run: |
          echo "extension_name=${{ github.event.inputs.extension-name }}" >> $GITHUB_ENV
          echo "release_environment=${{ github.event.inputs.release-environment }}" >> $GITHUB_ENV

      - name: Calculate circle ci workflow name
        id: circle-ci-workflow-name
        uses: actions/github-script@v6
        with:
          script: |
            const { release_environment, extension_name } = process.env;
            const isPreRelease = release_environment == 'Beta';
            console.log('circle-ci-workflow-name', release_environment, extension_name);
            
            if (isPreRelease) {
              return 'deploy-' + extension_name + '-beta';
            } else {
              return 'deploy-' + extension_name;
            }
          result-encoding: string

      - name: Echo Circle CI Workflow Name
        run: echo "${{ steps.circle-ci-workflow-name.outputs.result }}"

      - name: Trigger Circle CI
        id: trigger-circle-ci
        uses: CircleCI-Public/trigger-circleci-pipeline-action@v1.0.4
        with:
          GHA_Meta: ${{ steps.circle-ci-workflow-name.outputs.result }}
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}


